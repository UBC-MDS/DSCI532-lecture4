---
title: "L4 - Create a Dash python App"
institute: "Data Visualization II - DSCI 532 - MDS 2022/23"
format:
  revealjs:
    logo: img/mdslogo.png
    incremental: true  # bullets one by one 
    smaller: true
    scrollable: true
    theme: custom.scss
    slide-number: true
    show-slide-number: print
    chalkboard: true
---

## Lecture 4

- Workflow to develop a Dash app
- How can we create a basic **Dash App**?
- How a Dash app is different to a Shiny App? (**Comparison**)



---

## üôå Today's goal
#### Create a Dash-py app

There aren't books üìö for Dash, but we have the documentation (and lecture notes)!

---

## üôå Today's goal
#### Create a Dash-py app


**User interface**

- üåê [Dash html components](https://dash.plotly.com/dash-html-components/)

- üåê [Dash core components](https://dash.plotly.com/dash-core-components/)

- üåê [`dash-bootstrap-components` documentation](https://dash-bootstrap-components.opensource.faculty.ai/docs/components/layout/)

**Server**

- üåê [Basic Dash callbacks](https://dash.plotly.com/basic-callbacks)



---

## üôå Today's goal
#### Create a Dash-py app
 
- üåê [Datatable documentation](https://dash.plotly.com/datatable)
  
- üé• [Charming Data - Youtube channel](https://www.youtube.com/c/charmingdata)

---

## üôå Today's goal
#### Comparison Dash and Shiny

- üåê [Python Dash vs. R Shiny ‚Äì Which To Choose in 2021 and Beyond (2020) Dario Raderic ](https://appsilon.com/dash-vs-shiny/)

- üåê [Data-Science Reactivity: Three Ways (2022) Ian Lyttle](https://ijlyttle.github.io/reactivity-three-ways-quarto/)

---

## DSCI 532 Overview

![](img/532-overview-2023.png)



# How can we create a basic **Dash App**? {background-color="#F1FFFA"}

---

## Dash Apps gallery

Some Dash apps from last year (Heroku not working):  
  
- [Cherry Blossom tracker](https://github.com/UBC-MDS/cherry_blossom_tracker)  
  
- [Netflix Dashboard App](https://github.com/UBC-MDS/netflixpy_dashboard)  
  
- [Exploring the cost of living](https://github.com/UBC-MDS/Cost_of_living_py) 
  
- [Data Science Salary Dashboard](https://github.com/UBC-MDS/datasci_salaries_py)  
  
- [Tsunami Events Dashboard](https://github.com/UBC-MDS/tsunami-events-dashboard-python)  

- [Olympic Dashboard](https://github.com/UBC-MDS/olympic-dash)

---

## Dash Apps gallery

- [Video Game Sales](https://github.com/UBC-MDS/video_game_sales_dashboard)  
  
- [IMBD dashboard](https://github.com/UBC-MDS/imdb_dashboard)    
  
- [Mental Health in Tech Dashboard](https://github.com/UBC-MDS/mental_health_in_tech_dashboard)  
  
- [World Energy Dashboard](https://github.com/UBC-MDS/world-energy-visualization)  
  
- [Your happy place dashboard](https://github.com/UBC-MDS/your_happy_place)  
  
- [Olympic Athletes Dashboard](https://github.com/UBC-MDS/Olympic_athletes_dashboard)

---

## Dash Apps gallery

- [Dash Gallery](https://dash.gallery/Portal/)

---

## `Dash`

* Dash is a Open Source Python library for creating **reactive**, Web-based applications
* Dash applications are web servers running Flask and communicating JSON packets over HTTP requests. Dash‚Äôs frontend renders components using React.js.

---

> While Dash apps are viewed in the web browser, you don‚Äôt have to write any Javascript or HTML. Dash provides a Python interface to a rich set of interactive web-based components.

:::footer

[Introducing Dash](https://medium.com/plotly/introducing-dash-5ecf7191b503)

:::

---


## Dash app 
#### Basic structure

```python
from dash import dash, html


app = dash.Dash(__name__)

app.layout = html.Div('I am alive!!')

if __name__ == '__main__':
    app.run_server(debug=True)
```

---

## Dash app
#### Basic structure: comparison with Shiny

![](img/shiny+dash2.png)

---

## Before starting
#### What platform are we going to use for development?
1. VS Code  
2. Jupyter Lab

---


## Jupyter Lab?
#### There is a special package called `JupyterDash`

```bash
pip install jupyter-dash
```
The code will look like this:

```python
from jupyter_dash import JupyterDash
app = JupyterDash(__name__)
<your code>
app.run_server(mode='inline')
```

**We won't use `JupyterDash` in this course!**

:::footer

[Example](https://colab.research.google.com/drive/161ZTOzLWd12yNmf6I0c2we9zGOI5mRRZ?usp=sharing) 

:::



# Workflow to develop a Dash app {background-color="#F1FFFA"}

---

## What platform are we going to use for development?
1. VS Code
2. ~~Jupyter Lab~~

---

## VS Code
#### Workflow to develop your Dash app
1. Install `dataviz-532.yml` conda environment and activate it:

```bash
conda env create -f dataviz-532.yaml
```

2. Run `python app.py`

---

## VS Code
#### Workflow to develop your Dash app

3. Open *command palette* -> `Simple browser: show`. 
   - Paste there the url where dash is running. 
   - Click the button `split editor right` if you want to see the script and the browser in the screen at the same time.

```bash
$ python app.py
Dash is running on http://127.0.0.1:8050/
```
---

## Dash: workflow
#### hot reloading: update the app when saving it

This feature is activated by default when you run your app with the argument `debug=True`:

```python
app.run_server(debug=True) 
```

# DEMO: workflow and basic structure {background-color="#F1FFFA"}
_basic-app.py_

---

## Dash 2.8.3 (Feb 2023)
[Dash version 2.0.0](https://github.com/plotly/dash/releases/tag/v2.0.0) released in Sep 2021 introduced changes in the syntax

:::: {.columns}

::: {.column width="50%"}
Before:

```python
dcc.Dropdown(
    options=[
        {'label': 'New York',
        'value': 'New York'},
        {'label': 'Montreal',
        'value': 'Montreal'},
    ],
    value='New York'
)
```
:::

::: {.column width="50%"}

After:

```python
dcc.Dropdown({'NYC': 'New York',
              'MTL': 'Montreal'},
              'New York')
```

:::
::::



:::footer

https://community.plotly.com/t/dash-2-1-0-released/60548

:::

---

### Changes introduced in Dash 2.0.0 (2021)
_be careful with the examples you find online_
  
**Dash 1.x**

```python
import dash_html_components as html
import dash_core_components as dcc
import dash_table
```

**Dash 2.x**

```python
from dash import dash, html, dcc, dash_table
```

:::footer
[Changes in Dash v2.0](https://dash.plotly.com/dash-2-0-migration)
:::


#  How can we create a basic **Dash App**? {background-color="#F1FFFA"}



---

## Dash UI
#### Where is the HTML code?


`html.*` (and `dbc.*`) -> (~**Layout functions** in Shiny)

`dcc.*` -> the Widgets (~**Input functions** in Shiny)

---

## Dash UI
#### üåê [1. `html.*`](https://dash.plotly.com/dash-html-components/)

The **Dash HTML Components** (`dash.html`) module provides classes for all of the HTML tags, and the keyword arguments describe the HTML attributes like style, className, and id.

:::footer
[Mozilla webpage - Div element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div) - [`html.Div` component as example](https://dash.plotly.com/dash-html-components/div)
:::

---

## Dash UI
#### üåê [2. `dcc.*`](https://dash.plotly.com/dash-core-components/)

The **Dash Core Components** (`dash.dcc`) module generates higher-level components like controls and graphs.

:::footer
[Mozilla webpage](https://developer.mozilla.org/en-US/docs/Web/HTML) - [`dcc.Dropdown` component as example](https://dash.plotly.com/dash-core-components/dropdown)
:::

---

## Dash UI
#### üåê [3. `dbc.*`](https://dash-bootstrap-components.opensource.faculty.ai/docs/components/layout/)

**You can add themes and layout functions with `dash_bootstrap_components` library**

```python
import dash_bootstrap_components as dbc

app = dash.Dash(external_stylesheets=[dbc.themes.BOOTSTRAP])
```

:::footer
https://dash-bootstrap-components.opensource.faculty.ai/docs/quickstart/
:::

---

## Dash UI
#### Multi-page app (navbar)

`Dash 2.5.*`: *Dash Pages* implements features to simplify creating a multi-page app, handling URL routing and offering an easy way to structure and define the pages in your app.

- üìπ [Create Multipage Web App with Dash Pages](https://www.youtube.com/watch?v=pJMZ0r84Rqs)

- [navbar code](https://dash-bootstrap-components.opensource.faculty.ai/docs/components/navbar/)

:::footer
Extracted from [this web.](https://community.plotly.com/t/dash-2-5-released-easier-multi-page-apps-component-properties/64925)
:::


---

## Dash UI
#### Multi-page app with Dash Pages:

1 . Create individual `.py` files for each page in your app, and put them in a `/pages` directory.  
  
2. In each of these page files:
   - Add a `dash.register_page(__name__)`, which tells Dash that this is a page in your app.
   - Define the page‚Äôs content within a variable or function called `layout`.
   
:::footer
Extracted from [this web.](https://community.plotly.com/t/dash-2-5-released-easier-multi-page-apps-component-properties/64925)
:::

---

## Dash UI
#### Multi-page app with Dash Pages:

3. In your main app file, `app.py`:
   - When declaring your app, set `use_pages` to `True`: `app = Dash(__name__, use_pages=True)`
   - Add `dash.page_container` in your app‚Äôs layout where you want the content of the pages to be displayed for when the user visits one of the app‚Äôs page paths.


:::footer
Extracted from [this web.](https://community.plotly.com/t/dash-2-5-released-easier-multi-page-apps-component-properties/64925)
:::

---

## Dash UI
#### Single-page layout: a sidebar

- [Sidebar](https://dash-bootstrap-components.opensource.faculty.ai/examples/simple-sidebar/)

::: footer
[`className` argument customization](https://getbootstrap.com/docs/5.0/content/typography/)
:::



# DEMO: Sidebar and dropdown menu {background-color="#F1FFFA"}
_sidebar-example.py_

---

## Dash UI
#### Themes: `CSS` or `dbc.*`

**Option 1** - Using a `CSS` file  

_Note: Your company may have a CSS file with their custom style_

```python
from dash import dash, html

app = dash.Dash(__name__, external_stylesheets=['https://codepen.io/chriddyp/pen/bWLwgP.css']) 
```

:::footer
If you have a .css file you should locate it in a folder called `assert` 
:::

---

## Dash UI
#### Themes: `CSS` or `dbc.*`

**Option 1** - Using a `CSS` file

You can also style individual HTML components:

```python
app.layout = html.Div([
       html.H1('Hello!', style = {'background-color':'red'} ])
       
```

:::footer
[CSS definition - Mozilla](https://developer.mozilla.org/en-US/docs/Glossary/CSS)
:::

---

## Can I do this in Shiny?

- You can also [add CSS files to Shiny](https://shiny.rstudio.com/articles/css.html)

```r
ui <- fluidPage(
  tags$head(
    tags$link(rel = "stylesheet", type = "text/css", href = "dark_mode.css")
  )
```

::: footer
Open the link to see all the available ways to do this in Shiny
:::

---

## Dash UI
#### Adding a Theme to your app

**Option 2** - Using `dash_bootstrap_components`

```python
from dash import dash, html
import dash_bootstrap_components as dbc

app = dash.Dash(__name__,
                external_stylesheets=[dbc.themes.JOURNAL]) 
```



:::footer
[Mozilla webpage](https://developer.mozilla.org/en-US/docs/Web/HTML) - [`Bootswatch` themes](https://bootswatch.com/)
:::


---

## Dash UI
#### Adding a Theme to your app

**Option 2** - Using `dash_bootstrap_components`

> **Bootstrap** is the world's most popular frontend framework,
providing ready-to-use templates for css and javascript,
that save developers time.


```python
import dash_bootstrap_components as dbc
app = Dash(__name__,external_stylesheets=[dbc.themes.BOOTSTRAP])
```



::: footer
[dash-bootstrap-components documentation](https://dash-bootstrap-components.opensource.faculty.ai/docs/components/layout/)
:::


---


## Can I do this in Shiny?

- `dash_bootstrap_components` is similar (not equal) to `bslib`. 


:::footer
 [`Bootswatch` themes](https://bootswatch.com/)
:::

---

### Layout components

There are three main layout components in `dash-bootstrap-components`:

- Container `dbc.Container()`    
    - Row `dbc.Row()`  
       - Col `dbc.Col()`

:::footer
[`dash-bootstrap-components` documentation](https://dash-bootstrap-components.opensource.faculty.ai/docs/components/layout/)
:::

---

### Boostrap grid system

The Bootstrap grid has **twelve columns**, and [six responsive tiers](https://getbootstrap.com/docs/5.1/layout/grid/#grid-options) .

```{r echo=FALSE, out.width=400, fig.align='center'}
knitr::include_graphics("img/boostrap.png")
```

:::footer
[`dash-bootstrap-components` documentation](https://dash-bootstrap-components.opensource.faculty.ai/docs/components/layout/) / [Video Charming data](https://www.youtube.com/watch?v=0mfIK8zxUds)
:::


---

### `dbc.Container()`

Bootstrap's default layout component is called a **container**, and it will add white space on each side of the web page.


:::footer
[`dash-bootstrap-components` documentation](https://dash-bootstrap-components.opensource.faculty.ai/docs/components/layout/)
:::

---

### Boostrap grid system

```{r echo=FALSE}
knitr::include_graphics("img/boostrap.png")
```




# DEMO: Theme and bootstrap components {background-color="#F1FFFA"}
_layout-example.py_

---

## Dash UI
#### `dbc.Cards()`

```python
 dbc.Card([
          dbc.CardHeader('Variable distribution'),
          dbc.CardBody(html.Iframe(
                       id='histogram',
                       style={'border-width': '0',
                       'width': '100%', 
                       'height': '400px'}))
          ])
```
If you want the plots in different cards you will have to split them in 2 callbacks!



# Extra - Dash layout 
Read lecture notes and documentation


- [dash-bootstrap-components documentation](https://dash-bootstrap-components.opensource.faculty.ai)

- [Bootstrap cheatsheet](https://getbootstrap.com/docs/5.0/examples/cheatsheet/)


# Taking action via Dash callbacks {background-color="#F1FFFA"}


---

## Taking action via Dash callbacks

- ..."functions that are automatically called by Dash whenever an input component's property changes, in order to update some property in another component (the output)"

:::footer
[Basic callbacks](https://dash.plotly.com/basic-callbacks)
:::

---

## Taking action via Dash callbacks

```python
from dash import Input, Output

@app.callback(
    Output('widget-2', 'value'),
    Input('widget-1', 'value'))
def update_output(input_value):
    return input_value
```

---

## Dash
#### Important difference with Shiny

- `Input()` and `Output()` have a `property` argument

```python
app.layout = html.Div([
    html.Div([
        "Input: ",
        dcc.Input(id='my-input', value='initial value', type='text')
    ]),
    html.Div(id='my-output')])

@app.callback(
    Output(component_id='my-output', component_property='children'),
    Input(component_id='my-input', component_property='value')
)
def update_output_div(input_value):
    return f'Output: {input_value}'
```

::: footer
Complete example in [Dash Component properties - Dash documentation](https://dash.plotly.com/component-properties)
:::

---


> "Many components have a **children** property that accepts components, strings, numbers, and lists of those. If a component has a **children property**, then it is the first keyword argument of that component and is often omitted: `html.Div(html.Img())` is the same as `html.Div(children=html.Img()`)"

::: footer
[Dash Component properties](https://dash.plotly.com/component-properties)
:::



# DEMO: Basic callback {background-color="#F1FFFA"}
_simple-callback.py_

---

## Dash example app
```{r,echo = FALSE, fig.align='center', out.width=400}
knitr::include_graphics("img/l2-0.png")
```


---

```{r,echo = FALSE, fig.align='center'}
knitr::include_graphics("img/l2-2.png")
```

- This user interface (**app.layout**) has a a html element (`html.Div`) and a dash core component (`dcc.Input`).  
  
- These elements have different names (`widget-1` and `widget-2`)  

---

```{r,echo = FALSE, fig.align='center'}
knitr::include_graphics("img/l2-3.png")
```
When the user interacts with **widget-1** (`Input`), the function is executed in the server part.

---

```{r,echo = FALSE, fig.align='center'}
knitr::include_graphics("img/l2-4.png")
```
The output is returned to **widget-2**, defined as `Output`.

---

```{r,echo = FALSE, fig.align='center'}
knitr::include_graphics("img/l2-5.png")
```
In `@app.callback()` it is defined the reactivity with the functions `Input()` and `Output()`

---

```{r,echo = FALSE, fig.align='center', out.width= 500}
knitr::include_graphics("img/l2-1.png")
```



---


```{r,echo = FALSE, fig.align='center'}
knitr::include_graphics("img/reactivity-5.png")
```


---


```{r,echo = FALSE, fig.align='center'}
knitr::include_graphics("img/l2-6.png")
```

The user interface is connected üîå with the back-end code



# DEMO: Dash-py app with a reactive plot {background-color="#F1FFFA"}
_plot-app.py_



# How a Dash app is different to a Shiny App? (**Comparison**) {background-color="#F1FFFA"}

---

## Shiny and Dash

![](img/shiny+dash.png)

---

## Reactivity

#### In both
* The inputs/outputs are connected in the server/callback üîå

---

## Reactivity

#### In Dash
* Generic functions to connect the UI with the server `Input(<id>)` and `Output(<id>)` 
* A `component_property` argument should be specified (`value`, `selectData`, `children`, ...)

---

## Reactivity

#### In Shiny 
*  Specific pair of functions to connect the UI with the server (`plotlyOutput()` and `renderPlotly()`). This means that I don't need to select a `component_property` argument, I should change my pair of functions.

* `input$<inputId>` and `output$<outputId>` in the server creates the links with the UI


---

## Data Science reactivity: three ways
#### Author thoughts

1 **Shiny is more opinionated than Dash.**  
Being more opinionated lets you code more concisely. Being less opinionated gives you more flexibility in what you create, at the price of more code.

2. **Shiny manages the reactive graph for you; Dash makes you spell it out explicitly**.

:::footer
[Appendix C - Stray thoughts - Data science reactivity: three ways](https://ijlyttle.github.io/reactivity-three-ways-quarto/stray-thoughts.html)
:::

---

## Data Science reactivity: three ways
#### Author thoughts

3. **Shiny lets you store the state at the server; Dash do not**.

4. **Shiny and Dash both offer a UI/server framework**.

:::footer
[Appendix C - Stray thoughts - Data science reactivity: three ways](https://ijlyttle.github.io/reactivity-three-ways-quarto/stray-thoughts.html)
:::

---

### References

* [Dash Documentation](https://dash.plotly.com/introduction)

* [Introducing Dash](https://medium.com/plotly/introducing-dash-5ecf7191b503)


---

## Learning outcomes {background-color="#FED9B7"}

1. Identify **how a Dash app is designed** conceptually
2. **Run a Dash app** on a local server
3. **Create the Dash app user interface** with html and widgets (dropdowns, sliders, etc)
4. **Include an Altair plot** in dash
5. **Control an Altair plot** via widgets

---