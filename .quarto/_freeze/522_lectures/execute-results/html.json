{
  "hash": "1a3dd4fc28e3cf632d066c60695b945b",
  "result": {
    "markdown": "---\ntitle: \"Lecture 1\"\nauthor: \"Florencia D'Andrea\"\nformat:\n  revealjs:\n    logo: img/mdslogo.png\n    incremental: true  # bullets one by one \n    smaller: true\n    scrollable: true\n    theme: custom.scss\n---\n\n\n![](img/mdslogo.png){.absolute top=100 left=100 width=\"200\" height=\"200\"}\n\n# Data Science Workflows {.smaller}\n## DSCI 522 - MDS 2022-23 {.smaller}\n\n---\n\n## Quarto\n\nQuarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\n::: footer\nCustom footer text\n:::\n\n---\n\n\n::: {.incremental}\n\n- Eat spaghetti\n- Drink wine\n\n:::\n\n\n---\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\ncontents...\n:::\n\n::: {.column width=\"60%\"}\ncontents...\n:::\n\n::::\n\n---\n\n### Hello\n\n. . . \n\ntake it easy\n\n\n---\n\n## Slide Title\n\n- Green ^[A footnote]\n- Brown\n- Purple\n\n::: aside\nSome additional commentary of more peripheral interest.\n:::\n\n---\n\n```{.python code-line-numbers=\"6-8\"}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\n\n---\n\nFinally, you can highlight different line ranges progressively by separating them with |. For example, here we start by showing all lines, then progress to highlighting line 6, and finally to highlighting line 9:\n\n```{.python code-line-numbers=\"|6|9\"}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\n\n---\n\nYou can use this same option within an executable code cell by using the code-line-numbers cell options:\n\n```{.python}\n#| echo: fenced\n#| code-line-numbers: \"|6|9\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\n\n---\n\n# echo \n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw={\"projection\": \"polar\"})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\n\n::: {.cell-output-display}\n![](522_lectures_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\n--- \n\nFor example, here we display cell output on its own slide:\n\n\n::: {.cell output-location='slide'}\n::: {.cell-output-display}\n![](522_lectures_files/figure-revealjs/unnamed-chunk-3-3.png){width=960}\n:::\n:::\n\n\n---\n\n\n::: {.panel-tabset}\n\n### Tab A\n\nContent for `Tab A`\n\n### Tab B\n\nContent for `Tab B`\n\n:::\n\n---\n\n## Slide Title {background-color=\"aquamarine\"}\n\n---\n\n## Slide Title {background-color=\"black\" background-image=\"https://placekitten.com/100/100\" background-size=\"100px\" background-repeat=\"repeat\"}\n\nThis slide's background image will be sized to 100px and repeated. \n\n---\n\n\n## {auto-animate=true}\n\n::: {style=\"margin-top: 100px;\"}\nAnimating content\n:::\n\n## {auto-animate=true}\n\n::: {style=\"margin-top: 200px; font-size: 3em; color: red;\"}\nAnimating content\n:::\n\n---\n\n## Slide Title\n\nHere is an image:\n\n![](img/mdslogo.png){.r-stretch}\n\nSome text after the image.\n\n\n---\n\n![](img/mdslogo.png){.absolute top=200 left=0 width=\"350\" height=\"300\"}\n\n![](img/mdslogo.png){.absolute top=50 right=50 width=\"450\" height=\"250\"}\n\n![](img/mdslogo.png){.absolute bottom=0 right=50 width=\"300\" height=\"300\"}\n\n---\n\n## {auto-animate=\"true\"}\n\n```r\n# Fill in the spot we created for a plot\noutput$phonePlot <- renderPlot({\n  # Render a barplot\n})\n```\n\n## {auto-animate=true}\n\n```r\n# Fill in the spot we created for a plot\noutput$phonePlot <- renderPlot({\n  # Render a barplot\n  barplot(WorldPhones[,input$region]*1000, \n          main=input$region,\n          ylab=\"Number of Telephones\",\n          xlab=\"Year\")\n})\n```\n\n---\n\n\nMovement Animations\nAnimations are not limited to changes in style. Auto-Animate can also be used to automatically move elements into their new position as content is added, removed or rearranged on a slide. All without a single line of inline CSS. For example, here the delta between the content on two slides is implicitly animated:\n\n## {auto-animate=true}\n\nAnimation\n\n## {auto-animate=true}\n\nImplicit\n\nAnimation\n\n---\n\nElement Matching\n\n\n## {auto-animate=true auto-animate-easing=\"ease-in-out\"}\n\n::: {.r-hstack}\n::: {data-id=\"box1\" auto-animate-delay=\"0\" style=\"background: #2780e3; width: 200px; height: 150px; margin: 10px;\"}\n:::\n\n::: {data-id=\"box2\" auto-animate-delay=\"0.1\" style=\"background: #3fb618; width: 200px; height: 150px; margin: 10px;\"}\n:::\n\n::: {data-id=\"box3\" auto-animate-delay=\"0.2\" style=\"background: #e83e8c; width: 200px; height: 150px; margin: 10px;\"}\n:::\n:::\n\n## {auto-animate=true auto-animate-easing=\"ease-in-out\"}\n\n::: {.r-stack}\n::: {data-id=\"box1\" style=\"background: #2780e3; width: 350px; height: 350px; border-radius: 200px;\"}\n:::\n\n::: {data-id=\"box2\" style=\"background: #3fb618; width: 250px; height: 250px; border-radius: 200px;\"}\n:::\n\n::: {data-id=\"box3\" style=\"background: #e83e8c; width: 150px; height: 150px; border-radius: 200px;\"}\n:::\n:::\n\n---\n\n::: {.fragment}\nFade in\n:::\n\n::: {.fragment .fade-out}\nFade out\n:::\n\n::: {.fragment .highlight-red}\nHighlight red\n:::\n\n::: {.fragment .fade-in-then-out}\nFade in, then out\n:::\n\n::: {.fragment .fade-up}\nSlide up while fading in\n:::\n\n---\n\nNested fragments\n\n::: {.fragment .fade-in}\n::: {.fragment .highlight-red}\n::: {.fragment .semi-fade-out}\nFade in > Turn red > Semi fade out\n:::\n:::\n:::\n\n---\n\n\n# The end",
    "supporting": [
      "522_lectures_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}